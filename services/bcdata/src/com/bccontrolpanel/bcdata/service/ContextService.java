/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;

/**
 * Service object for domain model class Context.
 * @see com.bccontrolpanel.bcdata.Context
 */

public interface ContextService {
   /**
	 * Creates a new context.
	 * 
	 * @param created
	 *            The information of the created context.
	 * @return The created context.
	 */
	public Context create(Context created);

	/**
	 * Deletes a context.
	 * 
	 * @param contextId
	 *            The id of the deleted context.
	 * @return The deleted context.
	 * @throws EntityNotFoundException
	 *             if no context is found with the given id.
	 */
	public Context delete(Integer contextId) throws EntityNotFoundException;

	/**
	 * Finds all contexts.
	 * 
	 * @return A list of contexts.
	 */
	public Page<Context> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Context> findAll(Pageable pageable);
	
	/**
	 * Finds context by id.
	 * 
	 * @param id
	 *            The id of the wanted context.
	 * @return The found context. If no context is found, this method returns
	 *         null.
	 */
	public Context findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a context.
	 * 
	 * @param updated
	 *            The information of the updated context.
	 * @return The updated context.
	 * @throws EntityNotFoundException
	 *             if no context is found with given id.
	 */
	public Context update(Context updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the contexts in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the context.
	 */

	public long countAll();


    public Page<Context> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

