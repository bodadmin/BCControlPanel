/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;


/**
 * ServiceImpl object for domain model class Context.
 * @see com.bccontrolpanel.bcdata.Context
 */
@Service("BCdata.ContextService")
public class ContextServiceImpl implements ContextService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ContextServiceImpl.class);

    @Autowired
    @Qualifier("BCdata.ContextDao")
    private WMGenericDao<Context, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Context, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BCdataTransactionManager")
     public Page<Context> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BCdataTransactionManager")
    @Override
    public Context create(Context context) {
        LOGGER.debug("Creating a new context with information: {}" , context);
        return this.wmGenericDao.create(context);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BCdataTransactionManager")
    @Override
    public Context delete(Integer contextId) throws EntityNotFoundException {
        LOGGER.debug("Deleting context with id: {}" , contextId);
        Context deleted = this.wmGenericDao.findById(contextId);
        if (deleted == null) {
            LOGGER.debug("No context found with id: {}" , contextId);
            throw new EntityNotFoundException(String.valueOf(contextId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public Page<Context> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all contexts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public Page<Context> findAll(Pageable pageable) {
        LOGGER.debug("Finding all contexts");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public Context findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding context by id: {}" , id);
        Context context=this.wmGenericDao.findById(id);
        if(context==null){
            LOGGER.debug("No context found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return context;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BCdataTransactionManager")
    @Override
    public Context update(Context updated) throws EntityNotFoundException {
        LOGGER.debug("Updating context with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


