/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;


/**
 * ServiceImpl object for domain model class Contextfilename.
 * @see com.bccontrolpanel.bcdata.Contextfilename
 */
@Service("bcdata.ContextfilenameService")
public class ContextfilenameServiceImpl implements ContextfilenameService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ContextfilenameServiceImpl.class);

    @Autowired
    @Qualifier("bcdata.ContextfilenameDao")
    private WMGenericDao<Contextfilename, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Contextfilename, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "bcdataTransactionManager")
     public Page<Contextfilename> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "bcdataTransactionManager")
    @Override
    public Contextfilename create(Contextfilename contextfilename) {
        LOGGER.debug("Creating a new contextfilename with information: {}" , contextfilename);
        return this.wmGenericDao.create(contextfilename);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "bcdataTransactionManager")
    @Override
    public Contextfilename delete(Integer contextfilenameId) throws EntityNotFoundException {
        LOGGER.debug("Deleting contextfilename with id: {}" , contextfilenameId);
        Contextfilename deleted = this.wmGenericDao.findById(contextfilenameId);
        if (deleted == null) {
            LOGGER.debug("No contextfilename found with id: {}" , contextfilenameId);
            throw new EntityNotFoundException(String.valueOf(contextfilenameId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Page<Contextfilename> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all contextfilenames");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Page<Contextfilename> findAll(Pageable pageable) {
        LOGGER.debug("Finding all contextfilenames");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Contextfilename findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding contextfilename by id: {}" , id);
        Contextfilename contextfilename=this.wmGenericDao.findById(id);
        if(contextfilename==null){
            LOGGER.debug("No contextfilename found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return contextfilename;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "bcdataTransactionManager")
    @Override
    public Contextfilename update(Contextfilename updated) throws EntityNotFoundException {
        LOGGER.debug("Updating contextfilename with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


