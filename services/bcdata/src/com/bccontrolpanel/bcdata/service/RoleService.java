/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;

/**
 * Service object for domain model class Role.
 * @see com.bccontrolpanel.bcdata.Role
 */

public interface RoleService {
   /**
	 * Creates a new role.
	 * 
	 * @param created
	 *            The information of the created role.
	 * @return The created role.
	 */
	public Role create(Role created);

	/**
	 * Deletes a role.
	 * 
	 * @param roleId
	 *            The id of the deleted role.
	 * @return The deleted role.
	 * @throws EntityNotFoundException
	 *             if no role is found with the given id.
	 */
	public Role delete(Integer roleId) throws EntityNotFoundException;

	/**
	 * Finds all roles.
	 * 
	 * @return A list of roles.
	 */
	public Page<Role> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Role> findAll(Pageable pageable);
	
	/**
	 * Finds role by id.
	 * 
	 * @param id
	 *            The id of the wanted role.
	 * @return The found role. If no role is found, this method returns
	 *         null.
	 */
	public Role findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a role.
	 * 
	 * @param updated
	 *            The information of the updated role.
	 * @return The updated role.
	 * @throws EntityNotFoundException
	 *             if no role is found with given id.
	 */
	public Role update(Role updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the roles in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the role.
	 */

	public long countAll();


    public Page<Role> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

