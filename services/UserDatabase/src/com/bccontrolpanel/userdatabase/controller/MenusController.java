/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.userdatabase.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.bccontrolpanel.userdatabase.service.MenusService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.bccontrolpanel.userdatabase.*;
import com.bccontrolpanel.userdatabase.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Menus.
 * @see com.bccontrolpanel.userdatabase.Menus
 */
@RestController(value = "UserDatabase.MenusController")
@RequestMapping("/UserDatabase/Menus")
@Api(description = "Exposes APIs to work with Menus resource.", value = "MenusController")
public class MenusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MenusController.class);

    @Autowired
    @Qualifier("UserDatabase.MenusService")
    private MenusService menusService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Menus instances matching the search criteria.")
    public Page<Menus> findMenuss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Menuss list");
        return menusService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Menus instances.")
    public Page<Menus> getMenuss(Pageable pageable) {
        LOGGER.debug("Rendering Menuss list");
        return menusService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setMenusService(MenusService service) {
        this.menusService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Menus instance.")
    public Menus createMenus(@RequestBody Menus instance) {
        LOGGER.debug("Create Menus with information: {}", instance);
        instance = menusService.create(instance);
        LOGGER.debug("Created Menus with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Menus instances.")
    public Long countAllMenuss() {
        LOGGER.debug("counting Menuss");
        Long count = menusService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Menus instance associated with the given id.")
    public Menus getMenus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Menus with id: {}", id);
        Menus instance = menusService.findById(id);
        LOGGER.debug("Menus details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Menus instance associated with the given id.")
    public Menus editMenus(@PathVariable("id") Integer id, @RequestBody Menus instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Menus with id: {}", instance.getId());
        instance.setId(id);
        instance = menusService.update(instance);
        LOGGER.debug("Menus details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Menus instance associated with the given id.")
    public boolean deleteMenus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Menus with id: {}", id);
        Menus deleted = menusService.delete(id);
        return deleted != null;
    }
}
