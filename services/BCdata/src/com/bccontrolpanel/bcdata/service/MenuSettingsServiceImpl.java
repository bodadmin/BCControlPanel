/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;


/**
 * ServiceImpl object for domain model class MenuSettings.
 * @see com.bccontrolpanel.bcdata.MenuSettings
 */
@Service("BCdata.MenuSettingsService")
public class MenuSettingsServiceImpl implements MenuSettingsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MenuSettingsServiceImpl.class);

    @Autowired
    @Qualifier("BCdata.MenuSettingsDao")
    private WMGenericDao<MenuSettings, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MenuSettings, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "BCdataTransactionManager")
     public Page<MenuSettings> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "BCdataTransactionManager")
    @Override
    public MenuSettings create(MenuSettings menusettings) {
        LOGGER.debug("Creating a new menusettings with information: {}" , menusettings);
        return this.wmGenericDao.create(menusettings);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BCdataTransactionManager")
    @Override
    public MenuSettings delete(Integer menusettingsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting menusettings with id: {}" , menusettingsId);
        MenuSettings deleted = this.wmGenericDao.findById(menusettingsId);
        if (deleted == null) {
            LOGGER.debug("No menusettings found with id: {}" , menusettingsId);
            throw new EntityNotFoundException(String.valueOf(menusettingsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public Page<MenuSettings> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all menusettingss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public Page<MenuSettings> findAll(Pageable pageable) {
        LOGGER.debug("Finding all menusettingss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public MenuSettings findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding menusettings by id: {}" , id);
        MenuSettings menusettings=this.wmGenericDao.findById(id);
        if(menusettings==null){
            LOGGER.debug("No menusettings found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return menusettings;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BCdataTransactionManager")
    @Override
    public MenuSettings update(MenuSettings updated) throws EntityNotFoundException {
        LOGGER.debug("Updating menusettings with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "BCdataTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


