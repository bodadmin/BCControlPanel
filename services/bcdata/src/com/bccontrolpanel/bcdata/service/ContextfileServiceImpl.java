/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;


/**
 * ServiceImpl object for domain model class Contextfile.
 * @see com.bccontrolpanel.bcdata.Contextfile
 */
@Service("bcdata.ContextfileService")
public class ContextfileServiceImpl implements ContextfileService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ContextfileServiceImpl.class);

    @Autowired
    @Qualifier("bcdata.ContextfileDao")
    private WMGenericDao<Contextfile, ContextfileId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Contextfile, ContextfileId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "bcdataTransactionManager")
     public Page<Contextfile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "bcdataTransactionManager")
    @Override
    public Contextfile create(Contextfile contextfile) {
        LOGGER.debug("Creating a new contextfile with information: {}" , contextfile);
        return this.wmGenericDao.create(contextfile);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "bcdataTransactionManager")
    @Override
    public Contextfile delete(ContextfileId contextfileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting contextfile with id: {}" , contextfileId);
        Contextfile deleted = this.wmGenericDao.findById(contextfileId);
        if (deleted == null) {
            LOGGER.debug("No contextfile found with id: {}" , contextfileId);
            throw new EntityNotFoundException(String.valueOf(contextfileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Page<Contextfile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all contextfiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Page<Contextfile> findAll(Pageable pageable) {
        LOGGER.debug("Finding all contextfiles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Contextfile findById(ContextfileId id) throws EntityNotFoundException {
        LOGGER.debug("Finding contextfile by id: {}" , id);
        Contextfile contextfile=this.wmGenericDao.findById(id);
        if(contextfile==null){
            LOGGER.debug("No contextfile found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return contextfile;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "bcdataTransactionManager")
    @Override
    public Contextfile update(Contextfile updated) throws EntityNotFoundException {
        LOGGER.debug("Updating contextfile with information: {}" , updated);
        this.wmGenericDao.update(updated);

        ContextfileId id = new ContextfileId();
        id.setContextName(updated.getContextName());
        id.setContextFileName(updated.getContextFileName());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


