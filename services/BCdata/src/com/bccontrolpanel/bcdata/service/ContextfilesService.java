/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;

/**
 * Service object for domain model class Contextfiles.
 * @see com.bccontrolpanel.bcdata.Contextfiles
 */

public interface ContextfilesService {
   /**
	 * Creates a new contextfiles.
	 * 
	 * @param created
	 *            The information of the created contextfiles.
	 * @return The created contextfiles.
	 */
	public Contextfiles create(Contextfiles created);

	/**
	 * Deletes a contextfiles.
	 * 
	 * @param contextfilesId
	 *            The id of the deleted contextfiles.
	 * @return The deleted contextfiles.
	 * @throws EntityNotFoundException
	 *             if no contextfiles is found with the given id.
	 */
	public Contextfiles delete(Integer contextfilesId) throws EntityNotFoundException;

	/**
	 * Finds all contextfiless.
	 * 
	 * @return A list of contextfiless.
	 */
	public Page<Contextfiles> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Contextfiles> findAll(Pageable pageable);
	
	/**
	 * Finds contextfiles by id.
	 * 
	 * @param id
	 *            The id of the wanted contextfiles.
	 * @return The found contextfiles. If no contextfiles is found, this method returns
	 *         null.
	 */
	public Contextfiles findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a contextfiles.
	 * 
	 * @param updated
	 *            The information of the updated contextfiles.
	 * @return The updated contextfiles.
	 * @throws EntityNotFoundException
	 *             if no contextfiles is found with given id.
	 */
	public Contextfiles update(Contextfiles updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the contextfiless in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the contextfiles.
	 */

	public long countAll();


    public Page<Contextfiles> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

