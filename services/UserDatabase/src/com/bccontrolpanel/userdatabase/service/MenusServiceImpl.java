/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.userdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.userdatabase.*;


/**
 * ServiceImpl object for domain model class Menus.
 * @see com.bccontrolpanel.userdatabase.Menus
 */
@Service("UserDatabase.MenusService")
public class MenusServiceImpl implements MenusService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MenusServiceImpl.class);

    @Autowired
    @Qualifier("UserDatabase.MenusDao")
    private WMGenericDao<Menus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Menus, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
     public Page<Menus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "UserDatabaseTransactionManager")
    @Override
    public Menus create(Menus menus) {
        LOGGER.debug("Creating a new menus with information: {}" , menus);
        return this.wmGenericDao.create(menus);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "UserDatabaseTransactionManager")
    @Override
    public Menus delete(Integer menusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting menus with id: {}" , menusId);
        Menus deleted = this.wmGenericDao.findById(menusId);
        if (deleted == null) {
            LOGGER.debug("No menus found with id: {}" , menusId);
            throw new EntityNotFoundException(String.valueOf(menusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public Page<Menus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all menuss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public Page<Menus> findAll(Pageable pageable) {
        LOGGER.debug("Finding all menuss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public Menus findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding menus by id: {}" , id);
        Menus menus=this.wmGenericDao.findById(id);
        if(menus==null){
            LOGGER.debug("No menus found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return menus;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "UserDatabaseTransactionManager")
    @Override
    public Menus update(Menus updated) throws EntityNotFoundException {
        LOGGER.debug("Updating menus with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


