/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.userdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.userdatabase.*;

/**
 * Service object for domain model class Roles.
 * @see com.bccontrolpanel.userdatabase.Roles
 */

public interface RolesService {
   /**
	 * Creates a new roles.
	 * 
	 * @param created
	 *            The information of the created roles.
	 * @return The created roles.
	 */
	public Roles create(Roles created);

	/**
	 * Deletes a roles.
	 * 
	 * @param rolesId
	 *            The id of the deleted roles.
	 * @return The deleted roles.
	 * @throws EntityNotFoundException
	 *             if no roles is found with the given id.
	 */
	public Roles delete(Integer rolesId) throws EntityNotFoundException;

	/**
	 * Finds all roless.
	 * 
	 * @return A list of roless.
	 */
	public Page<Roles> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Roles> findAll(Pageable pageable);
	
	/**
	 * Finds roles by id.
	 * 
	 * @param id
	 *            The id of the wanted roles.
	 * @return The found roles. If no roles is found, this method returns
	 *         null.
	 */
	public Roles findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a roles.
	 * 
	 * @param updated
	 *            The information of the updated roles.
	 * @return The updated roles.
	 * @throws EntityNotFoundException
	 *             if no roles is found with given id.
	 */
	public Roles update(Roles updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the roless in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the roles.
	 */

	public long countAll();


    public Page<Roles> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

