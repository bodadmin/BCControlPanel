/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.bccontrolpanel.bcdata.service.ContextfilesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.bccontrolpanel.bcdata.*;
import com.bccontrolpanel.bcdata.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Contextfiles.
 * @see com.bccontrolpanel.bcdata.Contextfiles
 */
@RestController(value = "Bcdata.ContextfilesController")
@RequestMapping("/bcdata/Contextfiles")
@Api(description = "Exposes APIs to work with Contextfiles resource.", value = "ContextfilesController")
public class ContextfilesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContextfilesController.class);

    @Autowired
    @Qualifier("bcdata.ContextfilesService")
    private ContextfilesService contextfilesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Contextfiles instances matching the search criteria.")
    public Page<Contextfiles> findContextfiless(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Contextfiless list");
        return contextfilesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Contextfiles instances.")
    public Page<Contextfiles> getContextfiless(Pageable pageable) {
        LOGGER.debug("Rendering Contextfiless list");
        return contextfilesService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setContextfilesService(ContextfilesService service) {
        this.contextfilesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Contextfiles instance.")
    public Contextfiles createContextfiles(@RequestBody Contextfiles instance) {
        LOGGER.debug("Create Contextfiles with information: {}", instance);
        instance = contextfilesService.create(instance);
        LOGGER.debug("Created Contextfiles with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Contextfiles instances.")
    public Long countAllContextfiless() {
        LOGGER.debug("counting Contextfiless");
        Long count = contextfilesService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Contextfiles instance associated with the given id.")
    public Contextfiles getContextfiles(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Contextfiles with id: {}", id);
        Contextfiles instance = contextfilesService.findById(id);
        LOGGER.debug("Contextfiles details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Contextfiles instance associated with the given id.")
    public Contextfiles editContextfiles(@PathVariable("id") Integer id, @RequestBody Contextfiles instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Contextfiles with id: {}", instance.getId());
        instance.setId(id);
        instance = contextfilesService.update(instance);
        LOGGER.debug("Contextfiles details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Contextfiles instance associated with the given id.")
    public boolean deleteContextfiles(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Contextfiles with id: {}", id);
        Contextfiles deleted = contextfilesService.delete(id);
        return deleted != null;
    }
}
