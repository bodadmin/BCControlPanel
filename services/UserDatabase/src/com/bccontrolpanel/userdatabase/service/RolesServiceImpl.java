/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.userdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.userdatabase.*;


/**
 * ServiceImpl object for domain model class Roles.
 * @see com.bccontrolpanel.userdatabase.Roles
 */
@Service("UserDatabase.RolesService")
public class RolesServiceImpl implements RolesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(RolesServiceImpl.class);

    @Autowired
    @Qualifier("UserDatabase.RolesDao")
    private WMGenericDao<Roles, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Roles, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
     public Page<Roles> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "UserDatabaseTransactionManager")
    @Override
    public Roles create(Roles roles) {
        LOGGER.debug("Creating a new roles with information: {}" , roles);
        return this.wmGenericDao.create(roles);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "UserDatabaseTransactionManager")
    @Override
    public Roles delete(Integer rolesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting roles with id: {}" , rolesId);
        Roles deleted = this.wmGenericDao.findById(rolesId);
        if (deleted == null) {
            LOGGER.debug("No roles found with id: {}" , rolesId);
            throw new EntityNotFoundException(String.valueOf(rolesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public Page<Roles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all roless");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public Page<Roles> findAll(Pageable pageable) {
        LOGGER.debug("Finding all roless");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public Roles findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding roles by id: {}" , id);
        Roles roles=this.wmGenericDao.findById(id);
        if(roles==null){
            LOGGER.debug("No roles found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return roles;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "UserDatabaseTransactionManager")
    @Override
    public Roles update(Roles updated) throws EntityNotFoundException {
        LOGGER.debug("Updating roles with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "UserDatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


