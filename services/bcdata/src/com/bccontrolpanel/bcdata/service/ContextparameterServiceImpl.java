/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;


/**
 * ServiceImpl object for domain model class Contextparameter.
 * @see com.bccontrolpanel.bcdata.Contextparameter
 */
@Service("bcdata.ContextparameterService")
public class ContextparameterServiceImpl implements ContextparameterService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ContextparameterServiceImpl.class);

    @Autowired
    @Qualifier("bcdata.ContextparameterDao")
    private WMGenericDao<Contextparameter, ContextparameterId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Contextparameter, ContextparameterId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "bcdataTransactionManager")
     public Page<Contextparameter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "bcdataTransactionManager")
    @Override
    public Contextparameter create(Contextparameter contextparameter) {
        LOGGER.debug("Creating a new contextparameter with information: {}" , contextparameter);
        return this.wmGenericDao.create(contextparameter);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "bcdataTransactionManager")
    @Override
    public Contextparameter delete(ContextparameterId contextparameterId) throws EntityNotFoundException {
        LOGGER.debug("Deleting contextparameter with id: {}" , contextparameterId);
        Contextparameter deleted = this.wmGenericDao.findById(contextparameterId);
        if (deleted == null) {
            LOGGER.debug("No contextparameter found with id: {}" , contextparameterId);
            throw new EntityNotFoundException(String.valueOf(contextparameterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Page<Contextparameter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all contextparameters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Page<Contextparameter> findAll(Pageable pageable) {
        LOGGER.debug("Finding all contextparameters");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public Contextparameter findById(ContextparameterId id) throws EntityNotFoundException {
        LOGGER.debug("Finding contextparameter by id: {}" , id);
        Contextparameter contextparameter=this.wmGenericDao.findById(id);
        if(contextparameter==null){
            LOGGER.debug("No contextparameter found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return contextparameter;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "bcdataTransactionManager")
    @Override
    public Contextparameter update(Contextparameter updated) throws EntityNotFoundException {
        LOGGER.debug("Updating contextparameter with information: {}" , updated);
        this.wmGenericDao.update(updated);

        ContextparameterId id = new ContextparameterId();
        id.setContextName(updated.getContextName());
        id.setContextFileName(updated.getContextFileName());
        id.setParameter(updated.getParameter());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "bcdataTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


