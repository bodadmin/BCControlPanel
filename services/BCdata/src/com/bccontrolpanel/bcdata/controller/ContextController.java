/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.bccontrolpanel.bcdata.service.ContextService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.bccontrolpanel.bcdata.*;
import com.bccontrolpanel.bcdata.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Context.
 * @see com.bccontrolpanel.bcdata.Context
 */
@RestController(value = "BCdata.ContextController")
@RequestMapping("/BCdata/Context")
@Api(description = "Exposes APIs to work with Context resource.", value = "ContextController")
public class ContextController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContextController.class);

    @Autowired
    @Qualifier("BCdata.ContextService")
    private ContextService contextService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Context instances matching the search criteria.")
    public Page<Context> findContexts(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Contexts list");
        return contextService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Context instances.")
    public Page<Context> getContexts(Pageable pageable) {
        LOGGER.debug("Rendering Contexts list");
        return contextService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setContextService(ContextService service) {
        this.contextService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Context instance.")
    public Context createContext(@RequestBody Context instance) {
        LOGGER.debug("Create Context with information: {}", instance);
        instance = contextService.create(instance);
        LOGGER.debug("Created Context with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Context instances.")
    public Long countAllContexts() {
        LOGGER.debug("counting Contexts");
        Long count = contextService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Context instance associated with the given id.")
    public Context getContext(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Context with id: {}", id);
        Context instance = contextService.findById(id);
        LOGGER.debug("Context details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Context instance associated with the given id.")
    public Context editContext(@PathVariable("id") Integer id, @RequestBody Context instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Context with id: {}", instance.getId());
        instance.setId(id);
        instance = contextService.update(instance);
        LOGGER.debug("Context details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Context instance associated with the given id.")
    public boolean deleteContext(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Context with id: {}", id);
        Context deleted = contextService.delete(id);
        return deleted != null;
    }
}
