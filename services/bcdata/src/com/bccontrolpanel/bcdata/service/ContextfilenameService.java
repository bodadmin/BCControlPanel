/*Copyright (c) 2016-2017 Business on Demand Ltd. All Rights Reserved. This software is the confidential and proprietary information of Business on Demand Ltd. You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with Business on Demand Ltd.*/

package com.bccontrolpanel.bcdata.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.bccontrolpanel.bcdata.*;

/**
 * Service object for domain model class Contextfilename.
 * @see com.bccontrolpanel.bcdata.Contextfilename
 */

public interface ContextfilenameService {
   /**
	 * Creates a new contextfilename.
	 * 
	 * @param created
	 *            The information of the created contextfilename.
	 * @return The created contextfilename.
	 */
	public Contextfilename create(Contextfilename created);

	/**
	 * Deletes a contextfilename.
	 * 
	 * @param contextfilenameId
	 *            The id of the deleted contextfilename.
	 * @return The deleted contextfilename.
	 * @throws EntityNotFoundException
	 *             if no contextfilename is found with the given id.
	 */
	public Contextfilename delete(Integer contextfilenameId) throws EntityNotFoundException;

	/**
	 * Finds all contextfilenames.
	 * 
	 * @return A list of contextfilenames.
	 */
	public Page<Contextfilename> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Contextfilename> findAll(Pageable pageable);
	
	/**
	 * Finds contextfilename by id.
	 * 
	 * @param id
	 *            The id of the wanted contextfilename.
	 * @return The found contextfilename. If no contextfilename is found, this method returns
	 *         null.
	 */
	public Contextfilename findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a contextfilename.
	 * 
	 * @param updated
	 *            The information of the updated contextfilename.
	 * @return The updated contextfilename.
	 * @throws EntityNotFoundException
	 *             if no contextfilename is found with given id.
	 */
	public Contextfilename update(Contextfilename updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the contextfilenames in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the contextfilename.
	 */

	public long countAll();


    public Page<Contextfilename> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

